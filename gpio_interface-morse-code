import rclpy
from rclpy.node import Node
import time
import RPi.GPIO as GPIO

class MorseNode(Node):
    def __init__(self):
        super().__init__("morse_node")

        #define and set up GPIO pin
        self.PIN = 18
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.PIN, GPIO.OUT)

        #Define on/off states
        self.ON = GPIO.HIGH
        self.OFF = GPIO.LOW

        #Set initial pin state to off
        GPIO.output(self.PIN, self.OFF)

        #Dictionary of morse code characters
        self.morse_code_dictionary = {
            "A": ".-",    "B": "-...",  "C": "-.-.", 
            "D": "-..",   "E": ".",     "F": "..-.",
            "G": "--.",   "H": "....",  "I": "..",
            "J": ".---",  "K": "-.-",   "L": ".-..",
            "M": "--",    "N": "-.",    "O": "---",
            "P": ".--.",  "Q": "--.-",  "R": ".-.",
            "S": "...",   "T": "-",     "U": "..-",
            "V": "...-",  "W": ".--",   "X": "-..-",
            "Y": "-.--",  "Z": "--.."
        }

    #String to morse code conversion
    def string_to_morse(self, msg):
        for i in range(len(msg)):
            self.morse_char_to_gpio(self.morse_code_dictionary[msg[i]])
            time.sleep(0.8) #Pause between characters

    #Conversion to GPIO signals
    def morse_char_to_gpio(self, char):
        for i in range(len(char)):
            if char[i] == ".":
                GPIO.output(self.PIN, self.ON)
                time.sleep(0.2)
                GPIO.output(self.PIN, self.OFF)
                time.sleep(0.2)
            elif char[i] == "-":
                GPIO.output(self.PIN, self.ON)
                time.sleep(0.6)
                GPIO.output(self.PIN, self.OFF)
                time.sleep(0.2)


def main(args=None):
    rclpy.init(args=args)
    morse_node = MorseNode()

    str_message = input("Enter message to be translated: ").upper() #Take user input
    morse_node.string_to_morse(str_message)

    #Stop sending signals to GPIO pin
    GPIO.cleanup()

    #On shutdown, kills the node
    morse_node.destroy_node()
    rclpy.shutdown()
    
if __name__ == "__main__":
    main()
